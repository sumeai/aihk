;; 设置窗口是否总是置顶，并可设置透明度
;; var_title,var_text 为窗口标题
;; bool_top 窗口是否置顶
;#include string.aik
#include tip.aik
SetWin_Top_Transparent(var_title, var_text, bool_top := true, var_Transparent := 0, var_Transparent2 := 0)
{
	if WinExist(var_title, var_text)
	{
		WinGetTransparent := WinGetTransparent(var_title, var_text)

		if bool_top
			WinSetAlwaysOnTop("On", var_title, var_text)

		if var_Transparent = 0 ; 为0时窗口活动时不透明，非活动时半透明
		{
			if WinActive(var_title, var_text)
			{
				WinSetTransparent("Off", var_title, var_text)
			}
			else
			{
				WinSetTransparent(100, var_title, var_text)
			}
		}
		else ; var_Transparent != 0，即设置窗口透明度为此值
		{
			if WinActive(var_title, var_text)
			{
				if WinGetTransparent != var_Transparent
					WinSetTransparent(var_Transparent, var_title, var_text)
			}
			else
			{
				if var_Transparent2 = 0
				{
					if WinGetTransparent != var_Transparent
						WinSetTransparent(var_Transparent, var_title, var_text)
				}
				else
				{
					if WinGetTransparent != var_Transparent2
						WinSetTransparent(var_Transparent2, var_title, var_text)
				}
			}
		}
	}
}

WinGetTransparent(title?, text?)
{
	try
		return WinGetTransparent("ahk_id " WinExist(title?, text?))
	catch
		return -1
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 实现鼠标移动到指定窗口，该窗口会自动变换透明度
SetWin_Top_autoTransparent(var_title, var_text, bool_top := true, var_Transparent1 := 240, var_Transparent2 := 200, var_Transparent3 := 180, var_Transparent4 := 80)
{
	if WinExist(var_title, var_text)
	{
		var_x := var_y := var_width := var_height := 0
		WinGetPos(&var_x, &var_y, &var_width, &var_height, var_title, var_text)

		CoordMode("Mouse", "Screen")
		MouseGetPos(&mouseVarX, &mouseVarY)

		if (mouseVarX > var_x && mouseVarX < var_x + var_width && mouseVarY > var_y + 50 && mouseVarY < var_y + var_height)
			SetWin_Top_Transparent(var_title, var_text, bool_top, var_Transparent1, var_Transparent2)
		else
			SetWin_Top_Transparent(var_title, var_text, bool_top, var_Transparent3, var_Transparent4)

		CoordMode("Mouse", "Relative")
	}
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;   移动活动窗口
; 函数：移动窗口
; 参数：winTitle - 窗口标题或标识符
;       dx - X轴移动距离（正数向右，负数向左）
;       dy - Y轴移动距离（正数向下，负数向上）
WinMoveDxDy(winTitle, dx, dy) {
    ; 检查窗口是否存在
    if !WinExist(winTitle) {
        talkshow("移动窗口错误：找不到标题为 '" winTitle "' 的窗口！")
        return false
    }
    
    ; 获取窗口句柄
    hwnd := WinExist(winTitle)
    
    ; 获取当前窗口位置和大小
    WinGetPos &x, &y, &width, &height, "ahk_id " hwnd
    
    ; 计算新位置
    newX := x + dx
    newY := y + dy
    
    ; 移动窗口
    WinMove newX, newY, width, height, "ahk_id " hwnd
    
    return true
}



;; WinMoveLeft - 将指定窗口移动到当前显示器的左侧
WinMoveLeft(WinTitle := "A") {
	; 获取窗口位置和大小
	if !WinGetArea(WinTitle, &x, &y, &w, &h) {
		talkshow "无法获取窗口位置: " WinTitle
		return false
	}

	; 获取窗口所在点的屏幕（使用窗口左上角位置）
	monitor := MonitorFind(x, y)

	; 获取该显示器的工作区域（排除任务栏等）
	if !MonitorGetWorkArea(monitor,  &Left, &Top, &Right, &Bottom) {
		talkshow "无法获取显示器工作区域"
		return
	}

	; 计算新的左侧位置
	newX := Left

	; 移动窗口
	WinMove newX,,,, WinTitle
}

;; WinMoveRight - 将指定窗口移动到当前显示器的右侧
WinMoveRight(WinTitle := "A") {
	; 获取窗口位置和大小
	if !WinGetArea(WinTitle, &x, &y, &w, &h) {
		talkshow "无法获取窗口位置: " WinTitle
		return false
	}

	; 获取窗口所在点的屏幕（使用窗口左上角位置）
	monitor := MonitorFind(x, y)

	; 获取该显示器的工作区域（排除任务栏等）
	if !MonitorGetWorkArea(monitor,  &Left, &Top, &Right, &Bottom) {
		talkshow "无法获取显示器工作区域"
		return
	}

	; 计算新的右侧位置
	newX := Right - w

	; 移动窗口
	WinMove newX,,,, WinTitle
}


;; WinMoveTop - 将指定窗口移动到当前显示器的顶部
WinMoveTop(WinTitle := "A") {
	; 获取窗口位置和大小
	if !WinGetArea(WinTitle, &x, &y, &w, &h) {
		talkshow "无法获取窗口位置: " WinTitle
		return false
	}

	; 获取窗口所在点的屏幕（使用窗口左上角位置）
	monitor := MonitorFind(x, y)

	; 获取该显示器的工作区域（排除任务栏等）
	if !MonitorGetWorkArea(monitor,  &Left, &Top, &Right, &Bottom) {
		talkshow "无法获取显示器工作区域"
		return
	}

	; 计算新的顶部位置
	newY := Top

	; 移动窗口
	WinMove , newY,,, WinTitle
}

;; WinMoveBottom - 将指定窗口移动到当前显示器的底部
WinMoveBottom(WinTitle := "A") {
	; 获取窗口位置和大小
	if !WinGetArea(WinTitle, &x, &y, &w, &h) {
		talkshow "无法获取窗口位置: " WinTitle
		return false
	}

	; 获取窗口所在点的屏幕（使用窗口左上角位置）
	monitor := MonitorFind(x, y)

	; 获取该显示器的工作区域（排除任务栏等）
	if !MonitorGetWorkArea(monitor,  &Left, &Top, &Right, &Bottom) {
		talkshow "无法获取显示器工作区域"
		return
	}

	; 计算新的底部位置
	newY := Bottom - h

	; 移动窗口
	WinMove , newY,,, WinTitle
}

WinMoveTopLeft(WinTitle := "A") {
	; 获取窗口位置和大小
	if !WinGetArea(WinTitle, &x, &y, &w, &h) {
		talkshow "无法获取窗口位置: " WinTitle
		return false
	}

	; 获取窗口所在点的屏幕（使用窗口左上角位置）
	monitor := MonitorFind(x, y)

	; 获取该显示器的工作区域（排除任务栏等）
	if !MonitorGetWorkArea(monitor,  &Left, &Top, &Right, &Bottom) {
		talkshow "无法获取显示器工作区域"
		return
	}

	; 计算新的顶部位置
	newY := Top
	newX := Left

	; 移动窗口
	WinMove newX, newY,,, WinTitle
}

WinGetArea(WinTitle := "A", &x := 0, &y := 0, &w := 0, &h := 0) {
	if !WinExist(WinTitle) {
		; talkshow "窗口不存在: " WinTitle
		return false
	}
	WinGetPos &x, &y, &w, &h, WinTitle
	if (x = "" or x = 0 
	and y = "" or y = 0 
	and w = "" or w = 0 
	and h = "" or h = 0) {
		return false
	}
	
	return true
}

WinMoveTopRight(WinTitle := "A") {
	; 获取窗口位置和大小
	if !WinGetArea(WinTitle, &x, &y, &w, &h) {
		talkshow "无法获取窗口位置: " WinTitle
		return false
	}

	; 获取窗口所在点的屏幕（使用窗口左上角位置）
	monitor := MonitorFind(x, y)

	; 获取该显示器的工作区域（排除任务栏等）
	if !MonitorGetWorkArea(monitor, &Left, &Top, &Right, &Bottom) {
		talkshow "无法获取显示器工作区域"
		return
	}

	; 计算新的顶部位置
	newY := Top
	newX := Right - w

	; 移动窗口
	WinMove newX, newY,,, WinTitle
}

WinMoveBottomLeft(WinTitle := "A") {
	; 获取窗口位置和大小
	if !WinGetArea(WinTitle, &x, &y, &w, &h) {
		talkshow "无法获取窗口位置: " WinTitle
		return false
	}

	; 获取窗口所在点的屏幕（使用窗口左上角位置）
	monitor := MonitorFind(x, y)

	; 获取该显示器的工作区域（排除任务栏等）
	if !MonitorGetWorkArea(monitor,  &Left, &Top, &Right, &Bottom) {
		talkshow "无法获取显示器工作区域"
		return
	}

	; 计算新的底部位置
	newY := Bottom - h
	newX := Left

	; 移动窗口
	WinMove newX, newY,,, WinTitle
}

WinMoveBottomRight(WinTitle := "A") {
	; 获取窗口位置和大小
	if !WinGetArea(WinTitle, &x, &y, &w, &h) {
		talkshow "无法获取窗口位置: " WinTitle
		return false
	}

	; 获取窗口所在点的屏幕（使用窗口左上角位置）
	monitor := MonitorFind(x, y)

	; 获取该显示器的工作区域（排除任务栏等）
	if !MonitorGetWorkArea(monitor, &Left, &Top, &Right, &Bottom) {
		talkshow "无法获取显示器工作区域"
		return
	}

	; 计算新的底部位置
	newY := Bottom - h
	newX := Right - w

	; 移动窗口
	WinMove newX, newY,,, WinTitle
}

;; WinMoveCenter - 将指定窗口移动到当前显示器的中心
WinMoveCenter(WinTitle := "A") {
	; 获取窗口位置和大小
	if !WinGetArea(WinTitle, &x, &y, &w, &h) {
		talkshow "无法获取窗口位置: " WinTitle
		return false
	}

    ; 获取窗口所在点的屏幕（使用窗口左上角位置）
    monitor := MonitorFind(x, y)

    ; 获取该显示器的工作区域（排除任务栏等）
    if !MonitorGetWorkArea(monitor,  &Left, &Top, &Right, &Bottom) {
        talkshow "无法获取显示器工作区域"
        return
    }

    ; 计算新的居中位置
    newX := Left + (Right - Left - w) // 2
    newY := Top + (Bottom - Top - h) // 2

    ; 移动窗口
    WinMove newX, newY,,, WinTitle
}

;; MonitorFind - 获取指定点所在的显示器索引(1-based)
MonitorFind(x, y) {
    ; 获取显示器数量
    MonitorCount := SysGet(80)

    loop MonitorCount {
		ActualN := MonitorGetWorkArea(A_Index, &Left, &Top, &Right, &Bottom)

		; 检查点是否在当前显示器的范围内
        if (x >= left && x < right && y >= top && y < bottom) {
            return ActualN  
        }
    }

    ; 如果点不在任何一个工作区中，返回 0
    return 0
}



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 更改当前窗口的大小
;; 设置窗口大小
WinSetSize(WinTitle := "A", NewWidth := 0, NewHeight := 0) {
    ; 获取当前窗口位置
    if !WinGetPos(&x, &y, &w, &h, WinTitle) {
        talkshow "无法获取窗口位置: " WinTitle
        return false
    }

	if (NewWidth = "" || NewWidth <= 0)
	{
		NewWidth := w
	}

	if (NewHeight = "" || NewHeight <= 0)
	{
		NewHeight := h
	}

    ; 移动并设置新大小
    return WinMove(x, y, NewWidth, NewHeight, WinTitle)
}



;;------窗口最大化最小化-------------------------------
IsWinMax(WinTitle := "A", WinText := "")
{
	try OutputVar := WinGetMinMax(WinTitle, WinText)
	return OutputVar = 1
}

IsWinMin(WinTitle := "A", WinText := "")
{
	try OutputVar := WinGetMinMax(WinTitle, WinText)
	return OutputVar = -1
}

IsWinTopMost(WinTitle := "A", WinText := "")
{
	ExStyle := WinGetExStyle(WinTitle, WinText)
	return (ExStyle & 0x8) != 0
}

GetWinAlpha(WinTitle := "A", WinText := "")
{
	try var_alpha := WinGetTransparent(WinTitle, WinText)
	if var_alpha = ""
		var_alpha := 255
	return var_alpha
}

∑最大化窗口(WinTitle := "A", WinText := "")
{
	WinMaximize(WinTitle, WinText)
}

∑最小化窗口(WinTitle := "A", WinText := "")
{
	WinMinimize(WinTitle, WinText)
}

∑还原窗口(WinTitle := "A", WinText := "")
{
	WinRestore(WinTitle, WinText)
}

∑最大化或还原窗口(WinTitle := "A", WinText := "")
{
	OutputVar := WinGetMinMax(WinTitle, WinText)
	if OutputVar = 0
		WinMaximize(WinTitle, WinText)
	else
		WinRestore(WinTitle, WinText)
}

∑设置窗口置顶(WinTitle := "A", WinText := "")
{
	WinSetAlwaysOnTop("On", WinTitle, WinText)
	tipx(20, "窗口已置顶")
}

∑取消窗口置顶(WinTitle := "A", WinText := "")
{
	WinSetAlwaysOnTop("Off", WinTitle, WinText)
	tipx(20, "取消窗口置顶")
}

∑设置鼠标下窗口置顶()
{
	MouseGetPos(, , &UMWID)
	WinSetAlwaysOnTop("On", "ahk_id " UMWID)
	tipx(20, "窗口已置顶")
}

∑取消鼠标下窗口置顶()
{
	MouseGetPos(, , &UMWID)
	WinSetAlwaysOnTop("Off", "ahk_id " UMWID)
	tipx(20, "取消窗口置顶")
}

∑关闭窗口(WinTitle := "A", WinText := "", isAsk := false)
{
	if !isAsk
	{
		WinClose(WinTitle, WinText)
		return
	}

	if WinTitle = "A"
	{
		WinGetTitle(&TitleTip, "A")
	}
	else
	{
		TitleTip := WinTitle
	}

	MsgResult := MsgBox("当前窗口标题：【" TitleTip "】`n`n确定要关闭它吗？", "关闭指定窗口", "YesNo")
	if MsgResult = "Yes"
		WinClose(WinTitle, WinText)

}

∑调整窗口大小(newwidth, newheight, WinTitle := "A", WinText := "")
{
	WinRestore(WinTitle, WinText)
	WinGetPos(&var_x, &var_y, &var_width, &var_height, WinTitle, WinText)

	if (newwidth = "")
		newwidth := var_width

	if (newheight = "")
		newheight := var_height

	if (newwidth == var_width && newheight == var_height)
		return

	WinMove(WinTitle, WinText, var_x, var_y, newwidth, newheight)
}


;; 窗口是否资源管理器
IsExploreWindow(WinClass_ := "A")
{
	if (WinClass_ = "")
		WinGetClass(&WinClass_, "A")
	else if (WinClass_ = "A")
		WinGetClass(&WinClass_, "A")

	if (WinClass_ = "CabinetWClass" || WinClass_ = "ExploreWClass" || WinClass_ = "Progman")
		return true

	return false
}
