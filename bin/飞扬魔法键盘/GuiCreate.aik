g_title := "飞扬魔法键盘"

;---- Alter the tray icon menu:
k_MenuItemHide := "隐藏键盘 &H"
k_MenuItemShow := "显示键盘 &S"

TrayMenu := A_TrayMenu
TrayMenu.Delete()  ; 删除默认菜单项
TrayMenu.Add(k_MenuItemHide, 显示或隐藏屏幕键盘)
TrayMenu.Add("&Reload", 重新加载)
TrayMenu.Add("&Exit", 退出菜单项)
TrayMenu.Default := k_MenuItemHide

;---- Calculate object dimensions based on chosen font size:
; 假设你之前定义过 k_FontSize，比如：k_FontSize := 12
k_KeyWidth := k_FontSize * 3
; k_KeyHeight := k_FontSize * 3 - 6
k_KeyHeight := 25
k_KeyMargin := k_FontSize / 6
; k_SpacebarWidth := k_FontSize * 26
k_KeyWidthHalf := k_KeyWidth / 2

g_KeySize := "w" k_KeyWidth " h" k_KeyHeight
g_Position := "x+" k_KeyMargin " " g_KeySize "  -Border"

g_keyBoard_icon := A_ScriptDir "/images/飞扬魔法键盘.png"

g_keyBoard_ColorName := ∑获取当前键盘颜色()
if (g_keyBoard_ColorName != ""){
    g_keyBoard_icon := A_ScriptDir "/images/" g_keyBoard_ColorName ".ico"
}

g_keyBoard_sidepic := A_ScriptDir "/images/" g_keyBoard_ColorName ".png"
g_keyBoard_setpic := A_ScriptDir "/images/设置.png"
g_keyBoard_name := ∑获取当前键盘名称()
g_keyBoard_color := GetKeyboardColor()

g_keyBoard_settingicon := A_ScriptDir "/images/设置.ico"

TraySetIcon(g_keyBoard_icon)


k_FontSize := 10
k_FontStyle := "norm"
k_FontName := "Segoe UI"
k_KeyWidth := 30
k_KeyMargin := 5

k_SpacebarWidth := 211
; g_keyBoard_color := "Red"
; g_keyBoard_icon := "keyboard.ico"
; g_keyBoard_sidepic := "sidepic.png"

myGui := Gui(, g_title)
myGui.SetFont("s" k_FontSize " " k_FontStyle, k_FontName)
myGui.Opt("-Caption -Border +ToolWindow")

TransColor := "F1ECED"
myGui.BackColor := TransColor
myGui.TransColor := TransColor

_key := Map()               ;; 存储所有的按钮对象
_ctrlInfo := Map()          ;; 存储所有的按钮对象的初始化信息
_keyNameArray := Array()    ;; 存储所有的按钮对象的Text

; 添加按钮
_key["ico"] := myGui.Add("Picture", "Section w" k_KeyHeight " xm h" k_KeyHeight " y9", g_keyBoard_icon)
_key["ico"].OnEvent("Click", StartDrag)

; _key["appskey"] := myGui.Add("Button", "Section w" k_KeyWidth " xm h" k_KeyHeight " y9", "☆")
; _key["appskey"].OnEvent("Click", StartDrag)
; _key["appskey"].OnEvent("DoubleClick", 移动窗口)

_key["f1"] := myGui.Add("Button", g_Position, "F1")
_key["f2"] := myGui.Add("Button", g_Position, "F2")
_key["f3"] := myGui.Add("Button", g_Position, "F3")
_key["f4"] := myGui.Add("Button", g_Position, "F4")
_key["f5"] := myGui.Add("Button", g_Position, "F5")
_key["f6"] := myGui.Add("Button", g_Position, "F6")
_key["f7"] := myGui.Add("Button", g_Position, "F7")
_key["f8"] := myGui.Add("Button", g_Position, "F8")
_key["f9"] := myGui.Add("Button", g_Position, "F9")
_key["f10"] := myGui.Add("Button", g_Position, "F10")
_key["f11"] := myGui.Add("Button", g_Position, "F11")
_key["f12"] := myGui.Add("Button", g_Position, "F12")
_key["f13"] := myGui.Add("Button", "x+1 w22 h" k_KeyHeight, "!")

_key["appskey"] := myGui.Add("Button", "x+1 w21 h" k_KeyHeight, "...")
_key["appskey"].OnEvent("Click", StartDrag)

;; 右上角
; _key["ico"] := myGui.Add("Picture", "x+1 w38 h" k_KeyHeight, g_keyBoard_icon)
; _key["ico"].OnEvent("Click", 移动窗口)



; myGui.SetFont("s8 norm")
; _key["exit"] := myGui.Add("Button", Format("h{} w39 x+{}", k_KeyHeight, 1), "退出")
; _key["exit"].OnEvent("Click", 退出)

myGui.SetFont("s" k_FontSize " " k_FontStyle, k_FontName)



_key["tilde"] := myGui.Add("Button", "Section w" k_KeyWidth " xm h" k_KeyHeight " y+1", "~")
_key["1"] := myGui.Add("Button", g_Position, "1")
_key["2"] := myGui.Add("Button", g_Position, "2")
_key["3"] := myGui.Add("Button", g_Position, "3")
_key["4"] := myGui.Add("Button", g_Position, "4")
_key["5"] := myGui.Add("Button", g_Position, "5")
_key["6"] := myGui.Add("Button", g_Position, "6")
_key["7"] := myGui.Add("Button", g_Position, "7")
_key["8"] := myGui.Add("Button", g_Position, "8")
_key["9"] := myGui.Add("Button", g_Position, "9")
_key["0"] := myGui.Add("Button", g_Position, "0")
_key["sub"] := myGui.Add("Button", g_Position, "-")
_key["equal"] := myGui.Add("Button", g_Position, "=")


width := k_KeyWidth + 9
_key["bk"] := myGui.Add("Button", "x+1"  " w" width " h" k_KeyHeight, "Bk")
_key["tab"] := myGui.Add("Button", Format("xm y+{} h{} w{}", 1, k_KeyHeight, k_KeyWidth+9), "Tab")
_key["q"] := myGui.Add("Button", g_Position, "Q")
_key["w"] := myGui.Add("Button", g_Position, "W")
_key["e"] := myGui.Add("Button", g_Position, "E")
_key["r"] := myGui.Add("Button", g_Position, "R")
_key["t"] := myGui.Add("Button", g_Position, "T")
_key["y"] := myGui.Add("Button", g_Position, "Y")
_key["u"] := myGui.Add("Button", g_Position, "U")
_key["i"] := myGui.Add("Button", g_Position, "I")
_key["o"] := myGui.Add("Button", g_Position, "O")
_key["p"] := myGui.Add("Button", g_Position, "P")
_key["lf"] := myGui.Add("Button", g_Position, "[")
_key["rf"] := myGui.Add("Button", g_Position, "]")
_key["fxg"] := myGui.Add("Button", g_Position, "\")

_key["capslock"] := myGui.Add("Button", Format("xm y+{} h{} w48", 1, k_KeyHeight), "Caps")
_key["capslock"].OnEvent("Click", CapsLockHandle)

_key["a"] := myGui.Add("Button", g_Position, "A")
_key["s"] := myGui.Add("Button", g_Position, "S")
_key["d"] := myGui.Add("Button", g_Position, "D")
_key["f"] := myGui.Add("Button", g_Position, "F")
_key["g"] := myGui.Add("Button", g_Position, "G")
_key["h"] := myGui.Add("Button", g_Position, "H")
_key["j"] := myGui.Add("Button", g_Position, "J")
_key["k"] := myGui.Add("Button", g_Position, "K")
_key["l"] := myGui.Add("Button", g_Position, "L")
_key["mh"] := myGui.Add("Button", g_Position, ";")
_key["dyh"] := myGui.Add("Button", g_Position, "'")


_key["enter"] := myGui.Add("Button", Format("x+{}  h{} w52", 1, k_KeyHeight), "Enter")
_key["shift"] := myGui.Add("Button", Format("xm y+{} h{} w50", 1, k_KeyHeight), "Shift")
_key["shift"].OnEvent("Click", Shift按钮响应)

_key["z"] := myGui.Add("Button", g_Position, "Z")
_key["x"] := myGui.Add("Button", g_Position, "X")
_key["c"] := myGui.Add("Button", g_Position, "C")
_key["v"] := myGui.Add("Button", g_Position, "V")
_key["b"] := myGui.Add("Button", g_Position, "B")
_key["n"] := myGui.Add("Button", g_Position, "N")
_key["m"] := myGui.Add("Button", g_Position, "M")
_key["dh"] := myGui.Add("Button", g_Position, ",")
_key["jh"] := myGui.Add("Button", g_Position, ".")
_key["xg"] := myGui.Add("Button", g_Position, "/")


myGui.SetFont("s7 norm")
_key["title"] := myGui.Add("Button", "x+1 w81 h" k_KeyHeight, g_keyBoard_name)

_key["title"].OnEvent("Click", (*)=>(_key["space"].Text := "双击切换键盘"))
_key["title"].OnEvent("DoubleClick", 弹出右键菜单)



; myGui.SetFont("s9 norm")
; myGui.Add("Button", Format("h{} x+{}", k_KeyHeight, k_KeyMargin), "隐藏").OnEvent("Click", 显示或隐藏屏幕键盘)
; myGui.Add("Button", Format("h{} x+{}", k_KeyHeight, k_KeyMargin), "退出").OnEvent("Click", 退出)

; myGui.SetFont("s10 bold")
; var_temp := 6 * k_KeyMargin
; _key["setting"] := myGui.Add("Checkbox", Format("x+{} h{} c{}", var_temp, k_KeyHeight, g_keyBoard_color), "■")
; _key["setting"].OnEvent("Click", 点击SettingCheckBox)

myGui.SetFont("s9 norm")
_key["ctrl"] := myGui.Add("Button", Format("xm y+{} h{}", 1, k_KeyHeight), "Ctrl")
_key["win"] := myGui.Add("Button", Format("h{} x+{}", k_KeyHeight, 1), "Win")
_key["alt"] := myGui.Add("Button", Format("h{} x+{}", k_KeyHeight, 1), "Alt")

myGui.SetFont("s8 norm")
_key["space"] := myGui.Add("Button", Format("h{} x+{} w{}", k_KeyHeight, 1, k_SpacebarWidth), "Space")
_key["btn_setting"] := myGui.Add("Button", Format("h{} x+{}", k_KeyHeight, 1), "设置")
_key["btn_setting"].OnEvent("Click", 勾选SettingCheckBox)

myGui.SetFont("s9 norm")
_key["hide"] := myGui.Add("Button", Format("h{} x+{}", k_KeyHeight, 1), "隐藏")
_key["hide"].OnEvent("Click", 显示或隐藏屏幕键盘)

;; 右下角
myGui.SetFont("s8 norm")
_key["exit"] := myGui.Add("Button", Format("h{} w39 x+{}", k_KeyHeight, 1), "退出")
_key["exit"].OnEvent("Click", 退出)


; _key["ico"] := myGui.Add("Picture", "x+1 w40 h" k_KeyHeight, g_keyBoard_icon)
; _key["ico"].OnEvent("Click", 移动窗口)


myGui.SetFont("s10 norm")
var_temp := 6 * k_KeyMargin
_key["setting"] := myGui.Add("Checkbox", Format("x200 y100 h{} c{}  Hidden", var_temp, k_KeyHeight, g_keyBoard_color), "■")
_key["setting"].OnEvent("Click", 点击SettingCheckBox)

myGui.SetFont("s9 norm")
width := k_KeyWidth - 1
height := k_KeyHeight - 2




_key_sidepic := myGui.Add("Picture", "x456 y36 AltSubmit", g_keyBoard_sidepic)
_key_sidepic.OnEvent("Click", StartDrag)


; 最后显示窗口
myGui.Opt("+E0x80000")
myGui.Show()


;; 切换键盘按钮名称
刷新界面按钮显示(g_keyBoard_name)

;; 将非默认键盘写入临时配置文件 temp.ini
if (g_keyBoard_name != "默认键盘") {
    WriteTempIni("飞扬魔法键盘", "最近键盘", g_keyBoard_name)
}

;; 将 GUI 窗口先移出屏幕
myGui.Show("y-2000")

;; 获取窗口信息
g_IsVisible := "y"      ;; 窗口是否可见
k_ID := WinExist("A")   ;; myGui的窗口id
WinGetPos(,, &k_WindowWidth, &k_WindowHeight, "ahk_id " k_ID)

g_GroupHeight := k_WindowHeight-4
myGui.SetFont("s9 norm") ; norm 默认字体，避免颜色导致 GroupBox 样式变化

var_temp := k_WindowWidth - 32

_GroupBox := myGui.Add("GroupBox", "x10 y0 w" var_temp " h" g_GroupHeight " v_GroupBox")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 遍历按钮，批量处理


;; 遍历所有的_key， 将其Text存储到_keyTextArray
for key, value in _key
{
    _keyNameArray.Push key
}



;; 统一设置Click事件

_keyClickArray := [
    "f1","f2","f3","f4","f5","f6","f7","f8","f9","f10","f11","f12",
    "1","2","3","4","5","6","7","8","9","0","sub","equal",
    "q","w","e","r","t","y","u","i","o","p","lf","rf","fxg",
    "a","s","d","f","g","h","j","k","l","mh","dyh",
    "z","x","c","v","b","n","m","dh","jh","xg"
]

_keyClickArray2 := [
    "bk",
    "tab",
    "enter",
    "space"
]

for index, value in _keyClickArray {
     _key[value].OnEvent("Click", ClickButtonHandle)

     cmdstr := FindFromIniMem(g_iniContent, g_keyBoard_name, value, "")
     if cmdstr != ""
     {
        _key[value].SetFont("bold")
        _key[value].OnEvent("Focus", FocusButtonHandle)
     } else If (g_keyBoard != "默认键盘") {
        btnHwnd := _key[value].Hwnd
        WinSetTransparent(100, "ahk_id " btnHwnd)
     }
}

for index, value in _keyClickArray2 {
    _key[value].OnEvent("Click", ClickButtonHandle)
}

; _GroupBox.Visible := false




;; 设置窗口的属性
WinSetAlwaysOnTop(true, "ahk_id " k_ID)
WinSetExStyle("+0x08000000", "ahk_id " k_ID) ; WS_EX_NOACTIVATE
WinSetTransColor(TransColor " 200", "ahk_id " k_ID)


;; 获取所有控件的初始化信息
; 设置所有按钮透明度()
for key, btn in _key {
    ; WinGetTransparent("ahk_id " btn.Hwnd)

    if not _ctrlInfo.Has(key) {
        _ctrlInfo[key] := GetCtrlProps(btn)
    }

    ; WinSetTransparent(76, "ahk_id " btnHwnd)
}


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 移动窗口位置（到上次关闭时的位置或默认位置）

; SysGet(k_WorkArea, "MonitorWorkArea", g_Monitor)

if (g_Monitor  = ""){
    g_Monitor := 1
}

g_Monitor := MonitorGet( g_Monitor, &k_WorkAreaLeft, &k_WorkAreaTop, &k_WorkAreaRight, &k_WorkAreaBottom)


k_WindowX := readTempIni("飞扬魔法键盘", g_keyBoard_name . "_winx", "")
k_WindowY := readTempIni("飞扬魔法键盘", g_keyBoard_name . "_winy", "")

if (k_WindowX = "") {
    k_WindowX := k_WorkAreaLeft + (k_WorkAreaRight - k_WorkAreaLeft - k_WindowWidth)/2
}

if (k_WindowY = "") {
    k_WindowY := k_WorkAreaBottom - k_WindowHeight
}

if (k_WindowY < 0) {
    k_WindowY := 200
}


WinMove k_WindowX, k_WindowY

