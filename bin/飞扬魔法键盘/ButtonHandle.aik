

Shift按钮响应(*) {
     return
 }



; 拖动开始函数
StartDrag(*) {
    global myGui, dx, dy
    CoordMode "Mouse", "Screen"

    ; 获取鼠标初始位置
    MouseGetPos(&startX, &startY)

    ; 获取窗口初始位置
    WinGetPos(&winX, &winY,,, myGui)

    dx := startX - winX
    dy := startY - winY

    ; msgbox (Format("x0:{}, y0:{}, x1:{}, y1:{}, x2:{}, y2:{}", startX, startY, startX1, startY1, startX2, startY2) )
    
    ; 监听鼠标左键按住期间的移动
    SetTimer(DragWindow, 10)
    KeyWait("LButton") ; 等待左键释放
    SetTimer(DragWindow, 0) ; 停止定时器
}

; 拖动窗口函数
DragWindow() {
    global myGui, dx, dy
    CoordMode "Mouse", "Screen"
    MouseGetPos(&currentX, &currentY)
    ; WinGetPos(&winX, &winY,,, myGui)
    
    ; 计算新位置
    newX := (currentX - dx)
    newY := (currentY - dy)
    
    ; 更新窗口位置
    WinMove(newX, newY,,, myGui)
    
    ; 更新起始鼠标位置
    startX := currentX
    startY := currentY
}


弹出右键菜单(*) {
     global g_bRightMenu, g_inicontent
     menuMap := GetMenuMap()
     if menuMap.Has("RightMenu")
     {
        RightMenu := menuMap["RightMenu"]
        RightMenu.Show()
        return
     }
        
     RightMenu := Menu()
     RightMenu.Add("新增键盘 &A", 新增键盘)
     RightMenu.Add("编辑键盘 &E", 用飞扬小字典编辑键盘)
     RightMenu.Add("隐藏键盘 &H", 显示或隐藏屏幕键盘)
     RightMenu.Add("默认位置 &D", 移动窗口到默认位置)
     RightMenu.Add("")
     RightMenu.Add("&0 默认键盘", 选择键盘)
     var_keyboard := ∑获取当前键盘名称()
     if var_keyboard = "默认键盘"
         RightMenu.Check("&0 默认键盘")
     var_temp := AllSecFromIniMem(g_inicontent)
     
     Loop Parse var_temp, "|"
     {
         if A_LoopField = "" || A_LoopField = "默认键盘" || A_LoopField = "CtrlPosition"
             continue
         var_line := A_LoopField
         var_menuitem := "&" A_Index " " var_line
         RightMenu.Add(var_menuitem, 选择键盘)
         if var_keyboard = var_line
             RightMenu.Check(var_menuitem)
     }
     menuMap["RightMenu"] := RightMenu
     RightMenu.Show()
 }
 

  
 勾选SettingCheckBox(*) {
     global _key, g_keyBoard_name
     myGui.Submit(false)
     var_keyboard := ∑获取当前键盘名称()
     if var_keyboard = "默认键盘"
     {
         MsgBox "默认键盘不能编辑！"
         return
     }
     bCheck := !_key["setting"].value
     _key["setting"].Value := bCheck
     点击SettingCheckBox()
     if GetKeyState("Shift", "P")
         Send "{Shift up}"
 }

显示或隐藏屏幕键盘(*) {
     global g_IsVisible, k_MenuItemHide, k_MenuItemShow
     if g_IsVisible = "y"
     {
         myGui.Hide()
         A_TrayMenu.Rename(k_MenuItemHide, k_MenuItemShow)
         g_IsVisible := "n"
     }
     else
     {
         myGui.Show()
         A_TrayMenu.Rename(k_MenuItemShow, k_MenuItemHide)
         g_IsVisible := "y"
     }
 }
 

 
点击SettingCheckBox(*) {
     global _key, g_keyBoard_name, k_ID, TransColor, g_keyBoard_setpic, g_keyBoard_sidepic,  _key, g_keyBoard_settingicon, g_keyBoard_icon
     myGui.Submit(false)
     if _key["setting"].value
     {
        ;  change_icon("设置.ico", true, 1)
         _key["btn_setting"].Text := "返回"
         _key["sidepic"].Value := g_keyBoard_setpic
         _key["title"].Opt("-Right")
         _key["title"].Text := "【 " g_keyBoard_name " 】 处于编辑状态"
         WinSetTransColor TransColor " 255", "ahk_id " k_ID
         Suspend true
         _key["groupbox"].Text := ""
         Sleep 10
         _key["groupbox"].Text := ""
        TraySetIcon(g_keyBoard_settingicon, , false)
     }
     else
     {
        TraySetIcon(g_keyBoard_icon)
         var_color := ∑获取当前键盘颜色()
        ;  change_icon(var_color ".ico", true)
         _key["btn_setting"].Text := "设置"
         _key["sidepic"].Value := g_keyBoard_sidepic
         _key["title"].Opt("+Right")
         _key["title"].Text := "【 " g_keyBoard_name " 】"
         WinSetTransColor TransColor " 150", "ahk_id " k_ID
         Suspend false
         _key["groupbox"].Text := ""
         Sleep 10
         _key["groupbox"].Text := ""
     }
 }


;; 响应按钮点击
ClickButtonHandle(ctrl, info) {
     myGui.Submit(false)
     
     ∑鼠标单击按键(ctrl)
 }



;; 响应按钮获得焦点
FocusButtonHandle(ctrl, info){

    value := KeynameToValname(ctrl.Text)

    cmdstr := FindFromIniMem(g_iniContent, g_keyBoard_name, value, "")

    TipCmdString(cmdstr)

 } 



 新增键盘(*) {
     global g_inifile, g_iniContent
     var_keyboard := myinput("新增键盘", "请输入要新建的键盘名称：")
     if var_keyboard != ""
     {
         if RegExMatch(var_keyboard, "[\[\]]")
         {
             MsgBox "键盘名称中不能包含 “[”和 “]”！"
             return
         }
         var_colorList := "橙色|丁香紫|红色|黄色|蓝色|绿色|玫瑰红|青色|设置|天蓝|银色|紫色"
         var_keycolor := InputListBox(var_colorList, "请选择键盘颜色")
         if var_keycolor != ""
         {
             write_ini(g_inifile, var_keyboard, "Color", var_keycolor)
             g_iniContent := IniFileRead(g_inifile)
             ∑切换键盘(var_keyboard)
         }
     }
 } 

 
 ∑修改按键按钮的标题(keyBoard_, keyChar_, caption_ := "") {
     var_caption := ∑获得按键按钮的标题(keyBoard_, keyChar_, &keyName)
     if caption_ = ""
         caption_ := var_caption

    if myGui.HasProp("_key_" . keyName)
        myGui["_key_" . keyName].Text := caption_
 }
 

移动窗口(*) {
     global g_bMoveWindow, g_mouse_x0, g_mouse_y0, g_win_x0, g_win_y0, k_ID, _key
     g_bMoveWindow := !g_bMoveWindow
     if g_bMoveWindow
     {
         CoordMode "Mouse", "Screen"
         MouseGetPos &g_mouse_x0, &g_mouse_y0

         WinGetPos &g_win_x0, &g_win_y0, &OutWidth, &OutHeight, "ahk_id " k_ID

         SetTimer 定时器飞扬魔法键盘窗口跟随鼠标移动, 100
         var_tip := "◇移动鼠标调整键盘窗口位置`n◇按下鼠标左键停止移动窗口`n◇空格键恢复窗口到默认位置"
         TrayTip "移动飞扬魔法键盘窗口", var_tip
         _key["space"].Text := "窗口跟随鼠标移动"
         Hotkey "LButton", 停止移动窗口, "On"
         Hotkey "Space", 移动窗口到默认位置, "On"
     }
     else
         停止移动窗口()
 }

 
停止移动窗口(*) {
     global g_bMoveWindow
     TrayTip()
     g_bMoveWindow := false
     SetTimer 定时器飞扬魔法键盘窗口跟随鼠标移动, 0
     ∑修改按键按钮的标题(∑获取当前键盘名称(), "Space")
     Hotkey "LButton", 停止移动窗口, "Off"
     Hotkey "Space", 移动窗口到默认位置,  "Off"
 }
 
移动窗口到默认位置(*) {
     global k_ID, k_WorkAreaRight, k_WorkAreaLeft, k_WindowWidth, k_WorkAreaBottom, k_WindowHeight
     停止移动窗口()
     k_WindowX := k_WorkAreaRight - k_WorkAreaLeft - k_WindowWidth
     k_WindowX := k_WindowX / 2 + k_WorkAreaLeft
     k_WindowY := k_WorkAreaBottom - k_WindowHeight
     WinMove k_WindowX, k_WindowY, , , "ahk_id " k_ID
 }
 
定时器飞扬魔法键盘窗口跟随鼠标移动(*) {
     global g_bMoveWindow, k_ID, g_mouse_x0, g_mouse_y0, g_win_x0, g_win_y0
     if !g_bMoveWindow || GetKeyState("LButton", "P")
     {
         停止移动窗口()
         return
     }
     if GetKeyState("Ctrl", "P")
     {
         停止移动窗口()
         移动窗口到默认位置()
         return
     }
     CoordMode "Mouse", "Screen"
     MouseGetPos &g_mouse_x, &g_mouse_y
     WinMove g_win_x0 + g_mouse_x - g_mouse_x0, g_win_y0 + g_mouse_y - g_mouse_y0, , , "ahk_id " k_ID
 }



 GetCtrlProps(btn) {
    global g_winTitle

    if !btn
        return

    ControlGetPos &OutX, &OutY, &OutWidth, &OutHeight, btn
    style := ControlGetStyle(btn.Hwnd, g_winTitle)

    property := {
        x : OutX,
        y : OutY,
        w : OutWidth,
        h : OutHeight,
        isVisible : btn.Visible,
        btnText : btn.Text,
        btnColor : "",
        btnFont : "",
        btnFontColor : "",
        btnFontStyle : style,
        btnHwnd : btn.Hwnd,
        btnTrans : 255
    } 

    return property
 }


 CapsLockHandle(ctrl, info){

    SetCapsLockState !GetKeyState("CapsLock", "T")
    ;; 切换CapsLock状态

    isOn := GetKeyState("CapsLock", "T") 
    ; MsgBox "CapsLock:" isOn

    if isOn
    {
        SetCapsLockState "Off"
        talkshow("【小写】CapsLock:OFF")
    }
    else
    {
        SetCapsLockState "On" 
        talkshow("【大写】CapsLock:ON")
    }

 }

 ctrl_position(ctrlName, default_position){
    global g_iniContent
    return FindFromIniMem(g_iniContent, "CtrlPosition", ctrlName, default_position)
 }

 